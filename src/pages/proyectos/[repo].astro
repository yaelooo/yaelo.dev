---
import Layout from "@layouts/Layout.astro";
import Readme from "@components/Readme.astro";
import Link from "@components/Link.astro";
import Book from "@icons/Book.astro";
import Github from "@icons/Github.astro";
import Web from "@icons/Web.astro";
import { getRepository, getLanguages } from "@lib/apiGithub";
import { convertDate } from "@utils/convertDate";

const { repo } = Astro.params;
const { data: repoData, error: repoError } = await getRepository(`${repo}`);
const { data: languagesData, error: languagesError } = await getLanguages(
  `${repo}`
);

if (repoError) {
  return Astro.redirect("/404");
}

if (!languagesData) {
  throw new Error("No se pudo obtener los datos de los lenguajes");
}

const totalBytesOfCode: number = Object.values(languagesData).reduce(
  (total: number, bytesOfCode: number) => total + bytesOfCode,
  0
);

const languagePercentages: [string, number][] = Object.entries(
  languagesData
).map(([language, bytesOfCode]: [string, number]) => {
  const percentage: number = (bytesOfCode / totalBytesOfCode) * 100;
  return [language, percentage];
});
---

<Layout title="Proyectos" description="Proyectos en GitHub">
  <article>
    <header class="flex flex-col gap-4">
      <h1 class="text-center">{repo}</h1>
      <p>
        {repoData?.description || "Descripción no disponible."}
      </p>
      <ul class="grid md:grid-cols-2 gap-4">
        <li>
          <span class="font-semibold">Fecha de actualización:</span>
          {
            repoData?.pushed_at
              ? convertDate(new Date(repoData.pushed_at))
              : "Fecha no disponible"
          }.
        </li>
        <li>
          <span class="font-semibold">Fecha de creación:</span>
          {
            repoData?.created_at
              ? convertDate(new Date(repoData.created_at))
              : "Fecha no disponible"
          }.
        </li>
        <li class="md:col-span-2">
          <span class="font-semibold">Lenguajes utilizados:</span>
          {
            languagesError
              ? "Error al obtener los lenguajes."
              : languagesData &&
                languagePercentages.map(([language, percentage]) => (
                  <span class="inline-block mr-2">
                    {language}: {percentage.toFixed(1)}%
                  </span>
                ))
          }
        </li>
      </ul>
    </header>
    <section
      class="flex flex-col border border-custom-accent/40 shadow-lg shadow-custom-accent/20 rounded-2xl p-8 mt-10"
    >
      <article>
        <header class="flex justify-between">
          <span class="flex gap-2 items-center">
            <Book class="text-custom-accent" /><span>Readme</span>
          </span>
          <span class="flex gap-2">
            <Link
              title={`Ir al repositorio del proyecto ${repoData?.name}`}
              href={`${repoData?.html_url}`}
              sr={`Ir al repositorio del proyecto ${repoData?.name}`}
              isExternal
              isCustom
              extraClasses="flex gap-2 items-center text-current"
            >
              <Github class="text-custom-accent" />
              <span class="hidden sm:flex">Ver código</span>
            </Link>
            {
              repoData?.homepage ? (
                <Link
                  title={`Ir a la página del proyecto ${repoData?.name}`}
                  href={`${repoData?.homepage}`}
                  sr={`Ir a la página del proyecto ${repoData?.name}`}
                  isExternal
                  isCustom
                  extraClasses="flex gap-2 items-center text-current"
                >
                  <Web class="text-custom-accent" />
                  <span class="hidden sm:flex">Ver página</span>
                </Link>
              ) : null
            }
          </span>
        </header>
        <hr
          class="border-custom-accent/40 shadow-lg shadow-custom-accent/20 rounded-2xl mt-1"
        />
        <Readme repo={`${repo}`} />
      </article>
    </section>
  </article>
</Layout>
