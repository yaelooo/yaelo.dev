---
import ImageRandom from "@components/ImageRandom.astro"
import { marked } from "marked"
import { getReadme } from "@utils/githubApi"

interface Props {
  repo: string
}

const { repo } = Astro.props

const { data, error } = await getReadme(`${repo}`)
let content = data ? await marked.parse(data) : ""

let updatedContent = content
  // RegEx to open links in a new tab
  .replace(
    /<a href="([^"]*)">/g,
    '<a class="md-link" href="$1" rel="noopener noreferrer" target="_blank">'
  )
  // RegEx to add copy button to code blocks
  .replace(
    /<\/code>/g,
    '</code><div class="copy_container"><button title="Copiar texto" class="buttonCopy"><svg width="24" height="24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" /><path d="M7 9.667A2.667 2.667 0 0 1 9.667 7h8.666A2.667 2.667 0 0 1 21 9.667v8.666A2.667 2.667 0 0 1 18.333 21H9.667A2.667 2.667 0 0 1 7 18.333z" /><path d="M4.012 16.737A2.005 2.005 0 0 1 3 15V5c0-1.1.9-2 2-2h10c.75 0 1.158.385 1.5 1" /></svg></button></div>'
  )
  // RegEx to add class "md" to ul, ol and li tags
  .replace(/<ul>/g, '<ul class="md-ul">')
  .replace(/<ol>/g, '<ol class="md-ol">')
  .replace(/<li>/g, '<li class="md-li">')
  // RegEx to add class "md" to table, th and td tags
  .replace(/<table>/g, '<table class="md-table">')
  .replace(/(<th align=".*?")/g, '$1 class="md-th"')
  .replace(/(<td align=".*?")/g, '$1 class="md-td"')
---

{
  error ? (
    <section class="mt-8 flex flex-col gap-4">
      <p>Error al obtener el archivo readme.md :(</p>
      <ImageRandom classes="w-96" alt="imagen error" src="/notfound" />
      <p>{error}</p>
    </section>
  ) : (
    <section class="mt-8 flex flex-col gap-4" set:html={updatedContent} />
  )
}

<style is:inline>
  h1 {
    font-size: 2.25rem;
    line-height: 2.5rem;
    font-weight: 600;
  }

  h2 {
    font-size: 1.875rem;
    line-height: 2.25rem;
    font-weight: 500;
  }

  h3 {
    font-size: 1.5rem;
    line-height: 2rem;
    font-weight: 500;
  }

  h4 {
    font-size: 1.25rem;
    line-height: 1.75rem;
    font-weight: 500;
  }

  h5 {
    font-size: 1.125rem;
    line-height: 1.75rem;
  }

  h1 > a.md-link,
  h2 > a.md-link {
    --tw-text-opacity: 1;
    color: rgba(var(--color-accent), var(--tw-text-opacity));
    text-decoration-style: wavy;
    text-decoration-color: rgb(var(--color-accent));
    text-underline-offset: 2px;
    text-decoration-line: underline;
  }

  h1 > a.md-link:hover,
  h2 > a.md-link:hover {
    color: currentColor;
    text-underline-offset: 2px;
  }

  a.md-link {
    --tw-text-opacity: 1;
    color: rgba(var(--color-accent), var(--tw-text-opacity));
  }

  a.md-link:hover {
    text-decoration-line: underline;
    text-decoration-style: wavy;
    text-decoration-color: rgb(var(--color-accent));
    text-underline-offset: 4px;
  }

  pre {
    display: flex;
    justify-content: space-between;
    gap: 10px;
    border-width: 1px;
    border-radius: 1rem;
    --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color),
      0 2px 4px -2px var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),
      var(--tw-shadow);
    --tw-shadow-color: rgba(var(--color-accent), 0.2);
    --tw-shadow: var(--tw-shadow-colored);
  }

  code {
    padding: 0.5rem;
    border-radius: 0.25rem;
    overflow: auto;
    flex-wrap: nowrap;
    display: flex;
    align-items: center;
  }

  ul.md-ul {
    padding-left: 1.5rem;
    list-style: disc;
  }

  ul.md-ul > li > ul {
    padding-left: 1.5rem;
    list-style: circle;
  }

  ul.md-ul > li > ul > li > ul {
    padding-left: 1.5rem;
    list-style: square;
  }

  ol.md-ol {
    padding-left: 1.5rem;
    list-style: decimal;
  }

  ol.md-ol > li > ol {
    padding-left: 1.5rem;
    list-style: circle;
  }

  ol.md-ol > li > ol > li > ol {
    padding-left: 1.5rem;
    list-style: square;
  }

  table.md-table {
    box-shadow:
      0 10px 15px -3px rgba(var(--color-accent), 0.2),
      0 4px 6px -2px rgba(var(--color-accent), 0.05);
  }

  td.md-td,
  th.md-th {
    font-weight: 400;
    border: 1px solid rgba(var(--color-accent), 0.4);
  }

  .copy_container {
    padding: 1rem;
    display: flex;
    align-items: center;
    max-height: max-content;
  }

  button {
    display: flex;
    border: none;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll("ul.md-ul").forEach(function (ul) {
      ;(ul as HTMLElement).querySelectorAll("li").forEach(function (li) {
        if ((li as HTMLElement).querySelector("input")) {
          ;(ul as HTMLElement).style.padding = "0"
          ;(ul as HTMLElement).style.listStyle = "none"
        }
      })
    })
  })
</script>

<script is:inline>
  const svg_check =
    '<svg width="24" height="24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z"></path><path d="m5 12 5 5L20 7"></path></svg>'

  async function copyToClipboard(text) {
    try {
      await navigator.clipboard.writeText(text)
      console.log("Texto copiado al portapapeles")
      return true
    } catch (err) {
      console.error("Error al copiar al portapapeles:", err)
      return false
    }
  }

  document.addEventListener("astro:page-load", () => {
    const buttons = document.querySelectorAll(".buttonCopy")

    buttons.forEach((button) => {
      button.addEventListener("click", async () => {
        const textElement = button.parentElement.previousElementSibling
        const textToCopy = textElement.textContent.trim()

        if (await copyToClipboard(textToCopy)) {
          const originalSvg = button.innerHTML
          button.innerHTML = svg_check

          setTimeout(() => {
            button.innerHTML = originalSvg
          }, 1000)
        }
      })
    })
  })
</script>
